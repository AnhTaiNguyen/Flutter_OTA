import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:intl/intl.dart';

import 'package:OTA/screens/home_screen.dart';
import 'package:OTA/Models/user_model.dart';

import '../Models/NetworkHandler.dart';
import '../Models/profile.dart';

class CurrentVersion {
  late String currentVersion = '';

  CurrentVersion({
    required this.currentVersion,
  });

  factory CurrentVersion.fromJson(Map<String, dynamic> json) {
    return CurrentVersion(
      currentVersion: json['deployment']['chunks'][0]['version'],
    );
  }
}

class VehicleInfo {
  final String vehicleName;
  late DateTime lastUpdateDate;

  VehicleInfo({
    required this.vehicleName,
    required this.lastUpdateDate,
  });

  // Factory method to create a VehicleInfo object from JSON data
  factory VehicleInfo.fromJson(Map<String, dynamic> json) {
    return VehicleInfo(
      vehicleName: json['description'],
      lastUpdateDate:
          DateTime.fromMillisecondsSinceEpoch(json['lastModifiedAt']),
    );
  }
}

class MetaData {
  late String vin;
  late String market;

  MetaData({
    required this.market,
    required this.vin,
  });

  factory MetaData.fromJson(Map<String, dynamic> json) {
    return MetaData(
        market: json['content'][0]['value'],
        vin: json['content'][1]['value']); //MetaData
  }
}

class vehicleScreen extends StatefulWidget {
  const vehicleScreen({Key? key}) : super(key: key);
  @override
  State<vehicleScreen> createState() => _VehicleScreenState();
}

class _VehicleScreenState extends State<vehicleScreen> {
  NetworkHandler networkHandler = NetworkHandler();
  Autogenerated autogenerate = Autogenerated();
  UserModel? userData;
  String carId = '';
  DateTime lastUpdateDate = DateTime.now();
  String identifyNumber = '';
  String vin = '';
  String market = '';
  String currentVersion = '';

  @override
  void initState() {
    super.initState();
    fetchUserData();
  }

  // Get carId from the user info
  void fetchUserData() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      final snapshot = await FirebaseFirestore.instance
          .collection('user_info')
          .where('email', isEqualTo: user.email)
          .limit(1)
          .get();

      if (snapshot.docs.isNotEmpty) {
        final userDataFromSnapshot =
            UserModel.fromSnapshot(snapshot.docs.first);
        setState(() {
          userData = userDataFromSnapshot;
        });
        this.carId = userDataFromSnapshot.carId;
        print("carID: " + carId);
        fetchVehicleInfo(carId);
        fetchMetaData(carId);
        fetchCurrVer(carId);
      }
    }
  }

// Fetch cur ver
  Future<CurrentVersion> fetchCurrVer(String carId) async {
    print('Let goo');
    var response = await networkHandler.getCurr(
      "https://device.eu1.bosch-iot-rollouts.com/CF738D39-C92C-49D7-A751-CDBEA75BDCD8/controller/v1/$carId",
    );

    // Convert the JSON string to a map using json.decode

    // Access the "href" value from the "_links" section
    String installedBaseHref = response['_links']['installedBase']['href'];
    var response1 = await networkHandler.getCurr(
      "${installedBaseHref}",
    );
    setState(
      () => currentVersion = response1['deployment']['chunks'][0]['version'],
    );
    return CurrentVersion.fromJson(response1);
  }

  // Fetch vehicle information from the server
  Future<VehicleInfo> fetchVehicleInfo(String carId) async {
    var response = await networkHandler.getVehicleInfo(
      "https://api.eu1.bosch-iot-rollouts.com/rest/v1/targets/$carId",
    );
    setState(
      () => lastUpdateDate =
          DateTime.fromMillisecondsSinceEpoch(response['lastModifiedAt']),
    );
    identifyNumber = DateFormat('dd-MM-yyyy – kk:mm').format(lastUpdateDate);
    // logger.i(identifyNumber);
    return VehicleInfo.fromJson(response);
  }

  // Fetch vehicle information from the server
  Future<MetaData> fetchMetaData(String carId) async {
    var response = await networkHandler.getVehicleInfo(
      "https://api.eu1.bosch-iot-rollouts.com/rest/v1/targets/$carId/metadata",
    );
    setState(() => {
          market = response['content'][0]['value'],
          vin = response['content'][1]['value']
        });
    return MetaData.fromJson(response);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: SvgPicture.asset(
          imglogo12,
          height: 70,
          width: 70,
          fit: BoxFit.scaleDown,
        ),
        backgroundColor: Colors.white,
        leading: IconButton(
            onPressed: () {},
            icon: IconButton(
              icon: const Icon(
                Icons.navigate_before_sharp,
                color: Colors.black,
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => HomeScreen(),
                  ),
                );
              },
            )),
        centerTitle: true,
        bottom: PreferredSize(
            preferredSize: Size.fromHeight(10),
            child: SizedBox(
              height: 10,
              width: double.infinity,
              child: SvgPicture.asset(
                imgTabbar,
                fit: BoxFit.cover,
              ),
            )),
      ),
      body: Container(
        width: MediaQuery.of(context).size.width,
        height: MediaQuery.of(context).size.height,
        child: Container(
          child: Padding(
            padding: EdgeInsets.fromLTRB(0, 50, 0, 0),
            child: Column(
              children: [
                Text(
                  "Vehicle Identification Number",
                  style: TextStyle(
                    color: Colors.black,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 10),
                Text(
                  '$vin',
                  style: TextStyle(fontSize: 20),
                ),
                SizedBox(height: 30),
                Text(
                  "Market",
                  style: TextStyle(
                    color: Colors.black,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 10),
                Text('$market', style: TextStyle(fontSize: 20)),
                SizedBox(height: 30),
                Text(
                  "Current Version",
                  style: TextStyle(
                    color: Colors.black,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 10),
                Text(
                  currentVersion != '' ? "${currentVersion}" : "N/A",
                  style: TextStyle(fontSize: 20),
                ),
                SizedBox(height: 30),
                Text(
                  "Last Update",
                  style: TextStyle(
                    color: Colors.black,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 10),
                Text(
                  DateFormat('dd-MM-yyyy – kk:mm').format(lastUpdateDate),
                  style: TextStyle(fontSize: 20),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
